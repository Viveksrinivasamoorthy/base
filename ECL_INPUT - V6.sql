DROP TABLE IF EXISTS ECL_INPUT;
CREATE TABLE ECL_INPUT
(
ARCHETYPE VARCHAR(50) DEFAULT NULL
,_REPORTING_DATE DATE DEFAULT NULL
,PARENT_GROUP_ID VARCHAR(50) DEFAULT NULL
,PARENT_GROUP_NAME VARCHAR(255) DEFAULT NULL
,CUSTOMER_ID VARCHAR(50) DEFAULT NULL
,FACILITY_ID VARCHAR(50) DEFAULT NULL
,EXPOSURE_ID VARCHAR(50) DEFAULT NULL
,ACCOUNT_NUMBER VARCHAR(50) DEFAULT NULL
,Balancesheet_ind VARCHAR(1) DEFAULT NULL
,PRODUCT_TYPE VARCHAR(255) DEFAULT NULL
,MAS612_QUALITATIVE_CRITERIA VARCHAR(20) DEFAULT NULL
,DAYS_PAST_DUE INT DEFAULT NULL
,CUSTOMER_DAYS_PAST_DUE INT DEFAULT NULL
,EXPOSURE_AMT DECIMAL(18,2) DEFAULT NULL
,GROUP_LIMIT DECIMAL(18,2) DEFAULT NULL
,PRODUCT_LIMIT DECIMAL(18,2) DEFAULT NULL
,CCY_CODE VARCHAR(3) DEFAULT 'SGD'
,MonthOfImport VARCHAR(10) NOT NULL
,KEY `PRODUCT_TYPE`(`PRODUCT_TYPE`)
,KEY `Balancesheet_ind`(`Balancesheet_ind`)
);

DROP VIEW IF EXISTS v_GROUP_LIMIT;
CREATE VIEW v_GROUP_LIMIT AS
SELECT DISTINCT PARENT_GROUP_ID,SUM(LIMIT_COMMITTED_AMT) AS GROUP_LIMIT  FROM CREDIT_FACILITY_DETAILS 
GROUP BY PARENT_GROUP_ID ;


DROP VIEW IF EXISTS v_ECL_CFD;
CREATE VIEW v_ECL_CFD AS
SELECT DISTINCT CFD.PARENT_GROUP_ID
    ,CFD.PARENT_GROUP_NAME 
    ,CFD.CUSTOMER_ID 
    ,CFD.FACILITY_ID 
    ,CASE WHEN CFD.BANK_SUB_PRODUCT_CODE ='Corporate Vendor Financing' THEN 'CVF'
        WHEN CFD.BANK_SUB_PRODUCT_CODE ='Accounts Receivable Financing (Disclosed)' THEN 'ARFD'
        WHEN CFD.BANK_SUB_PRODUCT_CODE ='Accounts Receivable Financing (Non-Disclosed)' THEN 'ARFND'
        WHEN CFD.BANK_SUB_PRODUCT_CODE ='Purchase Order Financing' THEN 'PO'
        WHEN CFD.BANK_SUB_PRODUCT_CODE ='Working Capital Financing' THEN 'WCF'
        WHEN CFD.BANK_SUB_PRODUCT_CODE ='NIP WC Bullet' THEN 'WCF NIP'
        WHEN CFD.BANK_SUB_PRODUCT_CODE IN ('Overdraft LN - Citi(Single)','Term LN - Citi(Monthly)') THEN 'Citi'
    ELSE '' END AS PRODUCT_TYPE
    ,GL.GROUP_LIMIT
    ,CFD.LIMIT_COMMITTED_AMT AS PRODUCT_LIMIT
    ,CFD.LIMIT_UNUTILIZED_AMT 
    ,CASE WHEN LIMIT_UNUTILIZED_AMT =0 THEN 'FULLY UTILIZED'
        WHEN LIMIT_UTILIZED_AMT = 0 AND LIMIT_COMMITTED_AMT =LIMIT_UNUTILIZED_AMT  THEN 'FULLY UNUTILIZED'
        ELSE 'PARTIALLY UNUTILIZED' END AS ARCHETYPE
FROM CREDIT_FACILITY_DETAILS CFD
JOIN v_GROUP_LIMIT GL ON CFD.PARENT_GROUP_ID =GL.PARENT_GROUP_ID;   


DROP VIEW IF EXISTS v_ECL_LD;
CREATE VIEW v_ECL_LD AS
SELECT DISTINCT EXPOSURE_ID
    ,DAYS_PAST_DUE
    ,PRIN_OUTSTANDING_AMT
    ,INTEREST_OUTSTANDING_AMT
    ,CUSTOMER_ID
    ,A.Name  AS CUSTOMER_NAME
    ,COALESCE(PA.User_ID__c,A.User_ID__c ) AS PARENT_GROUP_ID 
    ,COALESCE(PA.Name,A.NAME)  AS PARENT_GROUP_NAME 
,CASE WHEN A.ParentId IS NOT NULL THEN PA.Credit_Grade__c
    WHEN A.ParentId IS NULL THEN A.Credit_Grade__c
    ELSE '' END AS MAS612_QUALITATIVE_CRITERIA
,CASE WHEN A.ParentId IS NOT NULL THEN PA.Customer_days_past_due__c
    WHEN A.ParentId IS NULL THEN A.Customer_days_past_due__c
    ELSE NULL END AS CUSTOMER_DAYS_PAST_DUE
    ,SANCTIONED_LIMIT
    ,FACILITY_ID
    ,CASE WHEN LD.BANK_SUB_PRODUCT_CODE IN ('Corporate Vendor Financing') THEN 'CVF'
        WHEN LD.BANK_SUB_PRODUCT_CODE ='Accounts Receivable Financing (Disclosed)' THEN 'ARFD'
        WHEN LD.BANK_SUB_PRODUCT_CODE ='Accounts Receivable Financing (Non-Disclosed)' THEN 'ARFND'
        WHEN LD.BANK_SUB_PRODUCT_CODE ='Purchase Order Financing' THEN 'PO'
        WHEN LD.BANK_SUB_PRODUCT_CODE ='Working Capital Financing' THEN 'WCF'
        WHEN LD.BANK_SUB_PRODUCT_CODE ='NIP WC Bullet' THEN 'WCF NIP'
        WHEN LD.BANK_SUB_PRODUCT_CODE IN ('Overdraft LN - Citi(Single)','Term LN - Citi(Monthly)') THEN 'Citi'
    ELSE '' END AS PRODUCT_TYPE
FROM LOAN_DATA LD
JOIN NS_Account A ON A.User_ID__c =LD.CUSTOMER_ID AND LD.ACCT_STATUS_CODE <> 'CLOSED_OBLIGATIONS_MET'
LEFT JOIN NS_Account PA ON PA.ID=A.PARENTID ;


DROP VIEW IF EXISTS v_ECL_PUU;
CREATE VIEW v_ECL_PUU AS
SELECT DISTINCT PARENT_GROUP_ID ,PARENT_GROUP_NAME,CUSTOMER_ID,FACILITY_ID,EXPOSURE_ID,EXPOSURE_ID AS ACCOUNT_NUMBER,'Y' AS BALANCESHEET_IND,PRODUCT_TYPE,MAS612_QUALITATIVE_CRITERIA,DAYS_PAST_DUE,CUSTOMER_DAYS_PAST_DUE
,PRIN_OUTSTANDING_AMT+INTEREST_OUTSTANDING_AMT AS EXPOSURE_AMT,GROUP_LIMIT,PRODUCT_LIMIT
FROM (
SELECT LD.PARENT_GROUP_ID ,LD.PARENT_GROUP_NAME,LD.CUSTOMER_ID,LD.FACILITY_ID,LD.EXPOSURE_ID,LD.EXPOSURE_ID AS ACCOUNT_NUMBER,LD.PRODUCT_TYPE,LD.MAS612_QUALITATIVE_CRITERIA,LD.DAYS_PAST_DUE,LD.CUSTOMER_DAYS_PAST_DUE
,SUM(LD.PRIN_OUTSTANDING_AMT) AS PRIN_OUTSTANDING_AMT,SUM(LD.INTEREST_OUTSTANDING_AMT) AS INTEREST_OUTSTANDING_AMT, CFD.GROUP_LIMIT,CFD.PRODUCT_LIMIT  
FROM v_ECL_LD LD 
JOIN v_ECL_CFD CFD ON  LD.PARENT_GROUP_ID =CFD.PARENT_GROUP_ID  AND LD.CUSTOMER_ID =CFD.CUSTOMER_ID AND LD.PRODUCT_TYPE  =CFD.PRODUCT_TYPE 
WHERE LD.PRIN_OUTSTANDING_AMT+LD.INTEREST_OUTSTANDING_AMT >0 AND CFD.ARCHETYPE ='PARTIALLY UNUTILIZED'  
GROUP BY LD.PARENT_GROUP_ID ,LD.PARENT_GROUP_NAME,LD.CUSTOMER_ID,LD.FACILITY_ID,LD.EXPOSURE_ID,LD.EXPOSURE_ID,LD.PRODUCT_TYPE,LD.MAS612_QUALITATIVE_CRITERIA,LD.DAYS_PAST_DUE,LD.CUSTOMER_DAYS_PAST_DUE
,CFD.GROUP_LIMIT,CFD.PRODUCT_LIMIT 
) X
UNION
SELECT DISTINCT PARENT_GROUP_ID ,PARENT_GROUP_NAME,CUSTOMER_ID,FACILITY_ID,'NA' AS EXPOSURE_ID,CONCAT(EXPOSURE_ID,'_UD') AS ACCOUNT_NUMBER,'N' AS BALANCESHEET_IND,PRODUCT_TYPE,MAS612_QUALITATIVE_CRITERIA,DAYS_PAST_DUE,CUSTOMER_DAYS_PAST_DUE
,LIMIT_UNUTILIZED_AMT  AS EXPOSURE_AMT,GROUP_LIMIT,PRODUCT_LIMIT
FROM (
SELECT LD.PARENT_GROUP_ID ,LD.PARENT_GROUP_NAME,LD.CUSTOMER_ID,LD.FACILITY_ID,LD.EXPOSURE_ID,LD.EXPOSURE_ID AS ACCOUNT_NUMBER,LD.PRODUCT_TYPE,LD.MAS612_QUALITATIVE_CRITERIA,0 AS DAYS_PAST_DUE,LD.CUSTOMER_DAYS_PAST_DUE
,SUM(LD.PRIN_OUTSTANDING_AMT) AS PRIN_OUTSTANDING_AMT,SUM(LD.INTEREST_OUTSTANDING_AMT) AS INTEREST_OUTSTANDING_AMT,CFD.LIMIT_UNUTILIZED_AMT , CFD.GROUP_LIMIT,CFD.PRODUCT_LIMIT  
,ROW_NUMBER() OVER (PARTITION BY LD.PARENT_GROUP_ID,LD.CUSTOMER_ID,LD.PRODUCT_TYPE ORDER BY LD.EXPOSURE_ID) RNK
FROM v_ECL_LD LD 
JOIN v_ECL_CFD CFD ON  LD.PARENT_GROUP_ID =CFD.PARENT_GROUP_ID  AND LD.CUSTOMER_ID =CFD.CUSTOMER_ID AND LD.PRODUCT_TYPE  =CFD.PRODUCT_TYPE 
WHERE  CFD.ARCHETYPE ='PARTIALLY UNUTILIZED'  
GROUP BY PARENT_GROUP_ID,PARENT_GROUP_NAME,CUSTOMER_ID,FACILITY_ID,EXPOSURE_ID,ACCOUNT_NUMBER,PRODUCT_TYPE,MAS612_QUALITATIVE_CRITERIA,DAYS_PAST_DUE,CUSTOMER_DAYS_PAST_DUE,PRIN_OUTSTANDING_AMT,INTEREST_OUTSTANDING_AMT,LIMIT_UNUTILIZED_AMT,GROUP_LIMIT,PRODUCT_LIMIT
) Y WHERE RNK=1
GROUP BY PARENT_GROUP_ID,PARENT_GROUP_NAME,CUSTOMER_ID,FACILITY_ID,EXPOSURE_ID,BALANCESHEET_IND,PRODUCT_TYPE,MAS612_QUALITATIVE_CRITERIA,DAYS_PAST_DUE,CUSTOMER_DAYS_PAST_DUE,EXPOSURE_AMT,GROUP_LIMIT,PRODUCT_LIMIT;



DROP VIEW IF EXISTS v_ECL_FU;
CREATE VIEW v_ECL_FU AS
SELECT DISTINCT PARENT_GROUP_ID ,PARENT_GROUP_NAME,CUSTOMER_ID,FACILITY_ID,EXPOSURE_ID,EXPOSURE_ID AS ACCOUNT_NUMBER,'Y' AS BALANCESHEET_IND,PRODUCT_TYPE,MAS612_QUALITATIVE_CRITERIA,DAYS_PAST_DUE,CUSTOMER_DAYS_PAST_DUE
,PRIN_OUTSTANDING_AMT+INTEREST_OUTSTANDING_AMT AS EXPOSURE_AMT,GROUP_LIMIT,PRODUCT_LIMIT  
FROM (
SELECT LD.PARENT_GROUP_ID ,LD.PARENT_GROUP_NAME,LD.CUSTOMER_ID,LD.FACILITY_ID,LD.EXPOSURE_ID,LD.EXPOSURE_ID AS ACCOUNT_NUMBER,LD.PRODUCT_TYPE,LD.MAS612_QUALITATIVE_CRITERIA,LD.DAYS_PAST_DUE,LD.CUSTOMER_DAYS_PAST_DUE
,SUM(LD.PRIN_OUTSTANDING_AMT) AS PRIN_OUTSTANDING_AMT,SUM(LD.INTEREST_OUTSTANDING_AMT) AS INTEREST_OUTSTANDING_AMT, CFD.GROUP_LIMIT,CFD.PRODUCT_LIMIT  
FROM v_ECL_LD LD 
JOIN v_ECL_CFD CFD ON LD.PARENT_GROUP_ID =CFD.PARENT_GROUP_ID  AND LD.CUSTOMER_ID =CFD.CUSTOMER_ID AND LD.PRODUCT_TYPE  =CFD.PRODUCT_TYPE
WHERE LD.PRIN_OUTSTANDING_AMT+LD.INTEREST_OUTSTANDING_AMT >0 AND CFD.ARCHETYPE ='FULLY UTILIZED'
GROUP BY LD.PARENT_GROUP_ID ,LD.PARENT_GROUP_NAME,LD.CUSTOMER_ID,LD.FACILITY_ID,LD.EXPOSURE_ID,LD.EXPOSURE_ID,LD.PRODUCT_TYPE,LD.MAS612_QUALITATIVE_CRITERIA,LD.DAYS_PAST_DUE,LD.CUSTOMER_DAYS_PAST_DUE
,CFD.GROUP_LIMIT,CFD.PRODUCT_LIMIT 
) CTE;


DROP VIEW IF EXISTS v_ECL_FUU;
CREATE VIEW v_ECL_FUU AS
SELECT DISTINCT PARENT_GROUP_ID ,PARENT_GROUP_NAME,CUSTOMER_ID,FACILITY_ID,'NA' AS EXPOSURE_ID,CONCAT(FACILITY_ID ,'_FI') AS ACCOUNT_NUMBER,'N' AS BALANCESHEET_IND,PRODUCT_TYPE
,CASE WHEN A.ParentId IS NOT NULL THEN PA.Credit_Grade__c
    WHEN A.ParentId IS NULL THEN A.Credit_Grade__c
    ELSE '' END AS MAS612_QUALITATIVE_CRITERIA
,0 AS DAYS_PAST_DUE    
,CASE WHEN A.ParentId IS NOT NULL THEN PA.Customer_days_past_due__c
    WHEN A.ParentId IS NULL THEN A.Customer_days_past_due__c
    ELSE NULL END AS CUSTOMER_DAYS_PAST_DUE
,LIMIT_UNUTILIZED_AMT  AS EXPOSURE_AMT,GROUP_LIMIT,PRODUCT_LIMIT  
FROM v_ECL_CFD CFD 
JOIN NS_Account A ON A.User_ID__c =CFD.CUSTOMER_ID
LEFT JOIN NS_Account PA ON PA.ID=A.PARENTID 
WHERE CFD.ARCHETYPE ='FULLY UNUTILIZED';



DROP VIEW IF EXISTS cv_ECL_INPUT;
CREATE VIEW cv_ECL_INPUT AS 
WITH CTE AS (
SELECT DISTINCT 'PARTIALLY UNUTILIZED' AS ARCHETYPE,PUU.* FROM v_ECL_PUU PUU
UNION
SELECT DISTINCT 'FULLY UTILIZED' AS ARCHETYPE,FU.* FROM v_ECL_FU FU
UNION
SELECT DISTINCT 'FULLY UNUTILIZED' AS ARCHETYPE,FUU.* FROM v_ECL_FUU FUU
) 
SELECT DISTINCT 
    ARCHETYPE
    ,DATE(NOW() - INTERVAL 1 DAY) AS _REPORTING_DATE
    ,PARENT_GROUP_ID
    ,PARENT_GROUP_NAME
    ,CUSTOMER_ID
    ,FACILITY_ID
    ,EXPOSURE_ID
    ,ACCOUNT_NUMBER
    ,BALANCESHEET_IND
    ,PRODUCT_TYPE
    ,MAS612_QUALITATIVE_CRITERIA
    ,DAYS_PAST_DUE
    ,CUSTOMER_DAYS_PAST_DUE
    ,EXPOSURE_AMT
    ,GROUP_LIMIT
    ,PRODUCT_LIMIT
    ,DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%b-%y') AS MonthOfImport
FROM CTE ;

DROP VIEW IF EXISTS v_ECL_INPUT;
CREATE VIEW v_ECL_INPUT AS
SELECT DISTINCT ARCHETYPE,DATE_FORMAT(_REPORTING_DATE,'%Y-%m-%d') _REPORTING_DATE,PARENT_GROUP_ID,PARENT_GROUP_NAME,CUSTOMER_ID,FACILITY_ID,EXPOSURE_ID,ACCOUNT_NUMBER,Balancesheet_ind,PRODUCT_TYPE,MAS612_QUALITATIVE_CRITERIA,DAYS_PAST_DUE,CUSTOMER_DAYS_PAST_DUE,EXPOSURE_AMT,GROUP_LIMIT,PRODUCT_LIMIT,CCY_CODE,MonthOfImport
FROM ECL_INPUT
WHERE MonthOfImport=DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%b-%y') ;



DROP PROCEDURE IF EXISTS proc_ECL_Input;
DELIMITER $$
CREATE DEFINER=`sg_automation`@`%` PROCEDURE `proc_ECL_Input`(IN IN_JOB_ID INT)
mainBlock:BEGIN
/*******************************************************
** File: proc_ECL_Input
** Name: ECL_INPUT
** Desc: DM - ECL_INPUT
** Auth: Vivek Srinivasamorthy
** Date: 08-05-2025
*******************************************************
** Change History
*******************************************************
** PR   Date        Author  Description 
** --   --------   -------   -------------------
** 1    
*******************************************************/
    DECLARE LV_TABLE_NAME,LV_STATUS VARCHAR(255);
    DECLARE ErrorMessage TEXT DEFAULT '';
    DECLARE done BOOLEAN;
    DECLARE LSQL TEXT DEFAULT '';
    DECLARE l_code VARCHAR(5) DEFAULT '';
    DECLARE l_message TEXT DEFAULT '';
    DECLARE l_rowcount int default 0;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1
        l_code = returned_sqlstate,
        l_message = message_text;
        CALL error_handler('Error',
        'An Exception Occured',
        l_code,
        CONCAT(l_message, " ---while running-", COALESCE(@LSQL, '')),
        'proc_ECL_Input'
        ,CONCAT(IN_JOB_ID));
    END;
    
    SET LV_TABLE_NAME= 'ECL_INPUT';

    CALL sys.table_exists(DATABASE(), LV_TABLE_NAME,@exist); 
  
    SET LSQL='',l_code='',l_message='', l_rowcount=0;
    SET LSQL = CONCAT("DELETE FROM ",LV_TABLE_NAME," WHERE MonthOfImport = CONCAT(DATE_FORMAT(DATE(NOW() - INTERVAL 4 MONTH),'%b'),'-',DATE_FORMAT(DATE(NOW() - INTERVAL 4 MONTH),'%y') )");   
    SET @LSQL = LSQL;
    PREPARE STMT2 FROM @LSQL;
    EXECUTE STMT2;
    GET DIAGNOSTICS l_rowcount = ROW_COUNT;
    DEALLOCATE PREPARE STMT2; 
    
    IF l_code=''
    THEN
        CALL error_handler(
        'Info',
        'Success',
        '',
        CONCAT("Table: ",LV_TABLE_NAME," - Deleted Month: ",DATE_FORMAT(DATE(NOW() - INTERVAL 4 MONTH),'%b-%y')," counts:",l_rowcount),
        'proc_ECL_Input'
        ,CONCAT(IN_JOB_ID));
    END IF; 

    SET LSQL='',l_code='',l_message='', l_rowcount=0, @LV_ACTIVE_MONTH=0;
    SET LSQL = CONCAT("SELECT COUNT(*) INTO @LV_ACTIVE_MONTH FROM ",LV_TABLE_NAME," WHERE MonthOfImport = CONCAT(DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%b'),'-',DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%y') )");   
    SET @LSQL = LSQL;
    PREPARE STMT2 FROM @LSQL;
    EXECUTE STMT2;
    DEALLOCATE PREPARE STMT2; 
    
    IF l_code='' AND @LV_ACTIVE_MONTH<>0
    THEN
        CALL error_handler(
        'Info',
        'Success',
        '',
        CONCAT("Table: ",LV_TABLE_NAME," - Already Exists: ",DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%b-%y')," counts:",@LV_ACTIVE_MONTH),
        'proc_ECL_Input'
        ,CONCAT(IN_JOB_ID));
        SET LV_STATUS = 'Warning';
        LEAVE mainBlock;
    END IF; 

    START TRANSACTION;

    SET LSQL='',l_code='',l_message='', l_rowcount=0;
    SET LSQL = CONCAT("INSERT INTO ",LV_TABLE_NAME,"
                        (ARCHETYPE,`_REPORTING_DATE`,PARENT_GROUP_ID,PARENT_GROUP_NAME,CUSTOMER_ID,FACILITY_ID,EXPOSURE_ID,ACCOUNT_NUMBER,Balancesheet_ind,PRODUCT_TYPE,
                            MAS612_QUALITATIVE_CRITERIA,DAYS_PAST_DUE,CUSTOMER_DAYS_PAST_DUE,EXPOSURE_AMT,GROUP_LIMIT,PRODUCT_LIMIT,MonthOfImport)
                        SELECT DISTINCT ARCHETYPE,`_REPORTING_DATE`,PARENT_GROUP_ID,PARENT_GROUP_NAME,CUSTOMER_ID,FACILITY_ID,EXPOSURE_ID,ACCOUNT_NUMBER,Balancesheet_ind,PRODUCT_TYPE,
                            MAS612_QUALITATIVE_CRITERIA,DAYS_PAST_DUE,CUSTOMER_DAYS_PAST_DUE,EXPOSURE_AMT,GROUP_LIMIT,PRODUCT_LIMIT,MonthOfImport
                        FROM  cv_",LV_TABLE_NAME,";");   
    SET @LSQL = LSQL; 
    PREPARE STMT2 FROM @LSQL;
    EXECUTE STMT2;
    GET DIAGNOSTICS l_rowcount = ROW_COUNT;
    DEALLOCATE PREPARE STMT2; 
    
    COMMIT;
    
    IF l_code=''
    THEN
        SET LV_STATUS = 'Completed';
        CALL error_handler(
        'Info',
        'Success',
        '',
        CONCAT("Table: ",LV_TABLE_NAME," - Inserted Month: ",DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%b-%y')," counts:",l_rowcount),
        'proc_ECL_Input'
        ,CONCAT(IN_JOB_ID));
    ELSE
        SET LV_STATUS = 'Error';
    END IF; 

    SET LSQL='',l_code='',l_message='';
    SET LSQL = CONCAT("UPDATE NS_Job_Detail SET RowCount=",l_rowcount,",Status='",LV_STATUS,"',EndDateTime=NOW() WHERE JobID=",IN_JOB_ID," AND NS_Name='",LV_TABLE_NAME,"';");   
    SET @LSQL = LSQL;
    PREPARE STMT2 FROM @LSQL;
    EXECUTE STMT2;
    GET DIAGNOSTICS l_rowcount = ROW_COUNT;
    DEALLOCATE PREPARE STMT2; 

    IF l_code=''
    THEN
        CALL error_handler(
        'Info',
        'Success',
        '',
        CONCAT("Table: NS_Job_Detail - Updated RowCount Successfully"),
        'proc_ECL_Input'
        ,CONCAT(IN_JOB_ID));
    END IF; 
END$$
DELIMITER ;