DROP TABLE IF EXISTS CUSTOMER_MASTER;
CREATE TABLE CUSTOMER_MASTER(
CUSTOMER_NAME VARCHAR(255) DEFAULT ''
,DATA_SOURCE VARCHAR(20) DEFAULT 'Salesforce_CL_Loan'
,CUSTOMER_ID VARCHAR(20) DEFAULT ''
,REPORTING_DATE DATE DEFAULT NULL
,DATE_OF_BIRTH DATE DEFAULT NULL
,CLOSED_DATE DATE DEFAULT NULL
,CUST_NATIONALITY VARCHAR(2) DEFAULT 'SG'
,SG_CITIZEN_IND CHAR(1) DEFAULT 'Y'
,START_DATE DATE DEFAULT NULL
,BRANCH_ID VARCHAR(20)  DEFAULT ''
,INCORPORATION_DATE DATE DEFAULT NULL
,CLOSED_IND CHAR(1) DEFAULT 'N'
,ANNUAL_INCOME DECIMAL(18,2) DEFAULT NULL
,ANNUAL_SALES_TURNOVER DECIMAL(18,2) DEFAULT NULL
,SSIC_CODE VARCHAR(20) DEFAULT ''
,CUSTOMER_TYPE VARCHAR(20) DEFAULT ''
,RELATED_COUNTERPARTY_IND CHAR(1) DEFAULT 'N'
,BANK_CODE VARCHAR(20) DEFAULT ''
,RELATIONSHIP_TYPE VARCHAR(50) DEFAULT ''
,SECTOR_TYPE VARCHAR(20) DEFAULT ''
,SWIFT_CODE VARCHAR(30) DEFAULT ''
,PARENT_GROUP_ID VARCHAR(50) DEFAULT ''
,CUST_ACTIVE_IND CHAR(1) DEFAULT 'Y'
,PROP_DEVELOPER_IND CHAR(1) DEFAULT ''
,PARENT_GROUP_NAME VARCHAR(255)
,INCORPORATION_COUNTRY_ID VARCHAR(20) DEFAULT 'SG'
,CUST_SIZE VARCHAR(20) DEFAULT ''
,COUNTRY_ID VARCHAR(2) DEFAULT 'SG'
,CURRENCY_CODE VARCHAR(3) DEFAULT ''
,LIVING_IN_COUNTRY_ID VARCHAR(20) DEFAULT 'SG'
,PLACE_WORK_COUNTRY_ID VARCHAR(20) DEFAULT ''
,MAIN_SOURCE_INC_COUNTRY_ID VARCHAR(2) DEFAULT 'SG'
,RESIDENT_IND CHAR(1) DEFAULT 'Y'
,RMB_CLEARING_IND CHAR(1) DEFAULT ''
,NBFI_IND CHAR(1) DEFAULT 'N'
,SME_IND CHAR(1) DEFAULT 'Y'
,NONFIN_IND CHAR(1) DEFAULT 'Y'
,Entity_code VARCHAR(20) DEFAULT 'SG01'
,QUALIFIED_CCP_FLAG CHAR(1) DEFAULT 'N'
,DIRECTOR_GROUP_FLAG CHAR(1) DEFAULT 'N'
,SUBSTANTIAL_SHAREHOLDER_FLAG CHAR(1) DEFAULT 'N'
,SNR_MGMT_FLAG CHAR(1) DEFAULT 'N'
,KEY_CRD_APP_FLAG CHAR(1) DEFAULT 'N'
,CUST_NON_AGGREGATION_FLAG CHAR(1) DEFAULT 'N'
,NON_AGGREGATION_REASON VARCHAR(100) DEFAULT ''
,NON_AGGREGATION_RATIONALE VARCHAR(255) DEFAULT ''
,MJR_STKENTGRP_FLAG CHAR(1) DEFAULT ''
,DIRECTOR_INTEREST_FLAG CHAR(1) DEFAULT 'N'
,CUST_INTEREST_FLAG CHAR(1) DEFAULT 'N'
,RELATED_PARTY_RELATIONSHIP_TYPE VARCHAR(100) DEFAULT ''
,SG_PR_IND CHAR(1) DEFAULT 'N'
,CUST_CURRENT_AGE INT DEFAULT NULL
,INCOME_LAST_UPDATE_DATE DATE DEFAULT NULL
,CUST_FIXED_INCOME_SOURCE CHAR(1) DEFAULT ''
,MONTHLY_INCOME  DECIMAL(18,2) DEFAULT NULL
,FINANCIAL_ASSETS  DECIMAL(18,2) DEFAULT NULL
,NET_PERSONAL_ASSETS  DECIMAL(18,2) DEFAULT NULL
,SOLE_PROP_IND CHAR(1) DEFAULT ''
,PARTNERSHIP_IND CHAR(1) DEFAULT ''
,ACCREDITED_INVESTOR_STATUS_IND CHAR(1) DEFAULT ''
,SIB_TYPE_IND CHAR(1) DEFAULT ''
,PRIME_CUST_IND CHAR(1) DEFAULT ''
,EMPLOYEE_IND CHAR(1) DEFAULT ''
,PEP_IND CHAR(1) DEFAULT ''
,PRIMARY_FUND_SOURCE VARCHAR(50) DEFAULT ''
,REGISTERED_NUMBER VARCHAR(20) DEFAULT ''
,TRADING_CAPACITY_IDENTIFIER VARCHAR(60) DEFAULT ''
,PRINCIPAL_ACTIVITY VARCHAR(255) DEFAULT ''
,PARTY_ROLE VARCHAR(20) DEFAULT ''
,EMPLOYMENT_TYPE VARCHAR(60) DEFAULT ''
,SUPERVISED_ENTITY_IND CHAR(1) DEFAULT ''
,Annual_Revenue DECIMAL(18,2) DEFAULT NULL
,Annual_Revenue_Date DATE DEFAULT NULL
,MonthOfImport VARCHAR(10) NOT NULL
);


DROP VIEW IF EXISTS cv_WithChildCM;
CREATE VIEW cv_WithChildCM AS
SELECT DISTINCT CUSTOMER_NAME
,CUSTOMER_ID
,ANNUAL_SALES_TURNOVER
,REPORTING_DATE
,START_DATE
,INCORPORATION_DATE
,SSIC_CODE
,CUSTOMER_TYPE
,SECTOR_TYPE
,PARENT_GROUP_ID
,PARENT_GROUP_NAME
,CURRENCY_CODE
,SOLE_PROP_IND
,PARTNERSHIP_IND
,REGISTERED_NUMBER
,PRINCIPAL_ACTIVITY
,PROP_DEVELOPER_IND
,CUST_SIZE
,Annual_Revenue
,MonthOfImport
FROM (
SELECT DISTINCT 
A.Name AS CUSTOMER_NAME
,A.User_ID__c AS CUSTOMER_ID
,CASE WHEN A.Annual_Sales_Turnover__c =0 OR A.Annual_Sales_Turnover__c IS NULL THEN 1.00 ELSE A.Annual_Sales_Turnover__c  END AS ANNUAL_SALES_TURNOVER 
,DATE(NOW() - INTERVAL 1 DAY) AS REPORTING_DATE
,A.CreatedDate  AS START_DATE
,STR_TO_DATE(A.Date_Of_Registration__c, '%d/%m/%Y') AS INCORPORATION_DATE
,LPAD(CAST(A.SSIC_Code AS UNSIGNED),5,'0')  AS SSIC_CODE
,A.Legal_Entity_Type AS CUSTOMER_TYPE
,L.Sector_Type AS SECTOR_TYPE
,COALESCE(PA.User_ID__c,A.User_ID__c) AS PARENT_GROUP_ID    
,COALESCE(PA.Name,A.Name) AS PARENT_GROUP_NAME
,A.Currency__c AS CURRENCY_CODE
,CASE WHEN A.clcommon__Legal_Entity_Type__c ='a7U2y000000TN1HEAW' THEN 'Y' ELSE 'N' END AS SOLE_PROP_IND
,CASE WHEN A.clcommon__Legal_Entity_Type__c='a7U2y000000TN1IEAW' THEN 'Y' ELSE 'N' END AS PARTNERSHIP_IND
,A.Lead_UEN__c AS REGISTERED_NUMBER
,L.SSIC_Description AS PRINCIPAL_ACTIVITY
,CASE WHEN P.SSIC_Code__c='68101' THEN 'Y' ELSE 'N' END AS PROP_DEVELOPER_IND
,COALESCE(A.Customer_Size__c,'') AS CUST_SIZE
,CASE WHEN A.Annual_Sales_Turnover__c =0 OR A.Annual_Sales_Turnover__c IS NULL THEN 1.00 ELSE A.Annual_Sales_Turnover__c  END AS Annual_Revenue 
,ROW_NUMBER() OVER (PARTITION BY A.User_ID__c ORDER BY P.CreatedDate DESC) RNK
,DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%b-%y') AS MonthOfImport
FROM NS_Account A
JOIN NS_loan__Loan_Account__c LLA ON A.Id=LLA.loan__Account__c AND LLA.GXS_Book__c=TRUE
LEFT JOIN NS_genesis__Applications__c P ON P.genesis__Account__c=A.Id AND P.Loan_ID__c IS NULL AND P.genesis__Loan_Amount__c IS NOT NULL AND P.genesis__Status__c='Approved' AND P.SSIC_Code__c IS NOT NULL
LEFT JOIN NS_Account PA ON PA.ID=A.PARENTID 
LEFT JOIN Lookup L ON L.SSIC_Code=A.SSIC_Code
LEFT JOIN NS_loan__Loan_Payment_Transaction__c LPT ON LPT.loan__Loan_Account__c = LLA.ID AND LPT.CL_Contract_Status__c IN ('Closed- Written Off')
WHERE LEFT(A.User_ID__c,1)='2'
AND ( LLA.Loan_Terminated_Date__c BETWEEN  DATE(LAST_DAY(CURDATE() - INTERVAL 2 MONTH) + INTERVAL 1 DAY) AND LAST_DAY(CURDATE() - INTERVAL 1 MONTH) 
OR (LLA.loan__Loan_Status__c like 'Active%')  
OR LPT.CreatedDate BETWEEN  DATE(LAST_DAY(CURDATE() - INTERVAL 2 MONTH) + INTERVAL 1 DAY) AND LAST_DAY(CURDATE() - INTERVAL 1 MONTH)  
 ) 
AND LLA.Genesis_Product__c NOT IN ('Term LN - Variable Rate - Monthly')
) CTE WHERE RNK=1;



DROP VIEW IF EXISTS cv_CUSTOMER_MASTER;
CREATE VIEW cv_CUSTOMER_MASTER AS
SELECT* FROM cv_WithChildCM
ORDER BY CUSTOMER_ID;


DROP VIEW IF EXISTS v_CUSTOMER_MASTER;
CREATE VIEW v_CUSTOMER_MASTER AS 
(
SELECT DISTINCT CUSTOMER_NAME,DATA_SOURCE,CUSTOMER_ID,DATE_FORMAT(REPORTING_DATE,'%Y-%m-%d') REPORTING_DATE,DATE_OF_BIRTH,CLOSED_DATE,CUST_NATIONALITY,SG_CITIZEN_IND,DATE_FORMAT(START_DATE,'%Y-%m-%d') START_DATE,
BRANCH_ID,DATE_FORMAT(INCORPORATION_DATE,'%Y-%m-%d') INCORPORATION_DATE,CLOSED_IND,ANNUAL_INCOME,ANNUAL_SALES_TURNOVER,SSIC_CODE,CUSTOMER_TYPE,RELATED_COUNTERPARTY_IND,BANK_CODE,RELATIONSHIP_TYPE,SECTOR_TYPE,
SWIFT_CODE,PARENT_GROUP_ID,CUST_ACTIVE_IND,PROP_DEVELOPER_IND,PARENT_GROUP_NAME,INCORPORATION_COUNTRY_ID,CUST_SIZE,COUNTRY_ID,CURRENCY_CODE,LIVING_IN_COUNTRY_ID,PLACE_WORK_COUNTRY_ID,MAIN_SOURCE_INC_COUNTRY_ID,
RESIDENT_IND,RMB_CLEARING_IND,NBFI_IND,SME_IND,NONFIN_IND,Entity_code,QUALIFIED_CCP_FLAG,DIRECTOR_GROUP_FLAG,SUBSTANTIAL_SHAREHOLDER_FLAG,SNR_MGMT_FLAG,KEY_CRD_APP_FLAG,CUST_NON_AGGREGATION_FLAG,NON_AGGREGATION_REASON,
NON_AGGREGATION_RATIONALE,MJR_STKENTGRP_FLAG,DIRECTOR_INTEREST_FLAG,CUST_INTEREST_FLAG,RELATED_PARTY_RELATIONSHIP_TYPE,SG_PR_IND,CUST_CURRENT_AGE,INCOME_LAST_UPDATE_DATE,CUST_FIXED_INCOME_SOURCE,MONTHLY_INCOME,FINANCIAL_ASSETS,
NET_PERSONAL_ASSETS,SOLE_PROP_IND,PARTNERSHIP_IND,ACCREDITED_INVESTOR_STATUS_IND,SIB_TYPE_IND,PRIME_CUST_IND,EMPLOYEE_IND,PEP_IND,PRIMARY_FUND_SOURCE,REGISTERED_NUMBER,TRADING_CAPACITY_IDENTIFIER,PRINCIPAL_ACTIVITY,PARTY_ROLE,
EMPLOYMENT_TYPE,SUPERVISED_ENTITY_IND,Annual_Revenue,Annual_Revenue_Date,MonthOfImport
FROM  CUSTOMER_MASTER
WHERE MonthOfImport=DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%b-%y') 
ORDER BY CUSTOMER_ID
);


DROP PROCEDURE IF EXISTS proc_CustomerMaster;
DELIMITER $$
CREATE DEFINER=`sg_automation`@`%` PROCEDURE `proc_CustomerMaster`(IN IN_JOB_ID INT)
mainBlock:BEGIN
/*******************************************************
** File: proc_CustomerMaster
** Name: CUSTOMER_MASTER
** Desc: DM - CustomerMaster
** Auth: Vivek Srinivasamorthy
** Date: 20-01-2025
*******************************************************
** Change History
*******************************************************
** PR   Date        Author  Description 
** --   --------   -------   -------------------
** 1    
*******************************************************/
    DECLARE LV_TABLE_NAME,LV_STATUS VARCHAR(255);
    DECLARE ErrorMessage TEXT DEFAULT '';
    DECLARE done BOOLEAN;
    DECLARE LSQL TEXT DEFAULT '';
    DECLARE l_code VARCHAR(5) DEFAULT '';
    DECLARE l_message TEXT DEFAULT '';
    DECLARE l_rowcount int default 0;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        GET DIAGNOSTICS CONDITION 1
        l_code = returned_sqlstate,
        l_message = message_text;
        CALL error_handler('Error',
        'An Exception Occured',
        l_code,
        CONCAT(l_message, " ---while running-", COALESCE(@LSQL, '')),
        'proc_CustomerMaster'
        ,CONCAT(IN_JOB_ID));
    END;
    
    SET LV_TABLE_NAME= 'CUSTOMER_MASTER';

    CALL sys.table_exists(DATABASE(), LV_TABLE_NAME,@exist); 
  
    SET LSQL='',l_code='',l_message='', l_rowcount=0;
    SET LSQL = CONCAT("DELETE FROM ",LV_TABLE_NAME," WHERE MonthOfImport = CONCAT(DATE_FORMAT(DATE(NOW() - INTERVAL 4 MONTH),'%b'),'-',DATE_FORMAT(DATE(NOW() - INTERVAL 4 MONTH),'%y') )");   
    SET @LSQL = LSQL;
    PREPARE STMT2 FROM @LSQL;
    EXECUTE STMT2;
    GET DIAGNOSTICS l_rowcount = ROW_COUNT;
    DEALLOCATE PREPARE STMT2; 
    
    IF l_code=''
    THEN
        CALL error_handler(
        'Info',
        'Success',
        '',
        CONCAT("Table: ",LV_TABLE_NAME," - Deleted Month: ",DATE_FORMAT(DATE(NOW() - INTERVAL 4 MONTH),'%b-%y')," counts:",l_rowcount),
        'proc_CustomerMaster'
        ,CONCAT(IN_JOB_ID));
    END IF; 

    SET LSQL='',l_code='',l_message='', l_rowcount=0, @LV_ACTIVE_MONTH=0;
    SET LSQL = CONCAT("SELECT COUNT(*) INTO @LV_ACTIVE_MONTH FROM ",LV_TABLE_NAME," WHERE MonthOfImport = CONCAT(DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%b'),'-',DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%y') )");   
    SET @LSQL = LSQL;
    PREPARE STMT2 FROM @LSQL;
    EXECUTE STMT2;
    DEALLOCATE PREPARE STMT2; 
    
    IF l_code='' AND @LV_ACTIVE_MONTH<>0
    THEN
        CALL error_handler(
        'Info',
        'Success',
        '',
        CONCAT("Table: ",LV_TABLE_NAME," - Already Exists: ",DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%b-%y')," counts:",@LV_ACTIVE_MONTH),
        'proc_CustomerMaster'
        ,CONCAT(IN_JOB_ID));
        SET LV_STATUS = 'Warning';
        LEAVE mainBlock;
    END IF; 

    START TRANSACTION;

    SET LSQL='',l_code='',l_message='', l_rowcount=0;
    SET LSQL = CONCAT("INSERT INTO ",LV_TABLE_NAME,"
                        (CUSTOMER_NAME,CUSTOMER_ID,ANNUAL_SALES_TURNOVER,REPORTING_DATE,START_DATE,INCORPORATION_DATE,SSIC_CODE,CUSTOMER_TYPE,SECTOR_TYPE,PARENT_GROUP_ID,PARENT_GROUP_NAME,
                            CURRENCY_CODE,SOLE_PROP_IND,PARTNERSHIP_IND,REGISTERED_NUMBER,PRINCIPAL_ACTIVITY,PROP_DEVELOPER_IND,CUST_SIZE,Annual_Revenue,MonthOfImport)
                        SELECT DISTINCT CUSTOMER_NAME,CUSTOMER_ID,ANNUAL_SALES_TURNOVER,REPORTING_DATE,START_DATE,INCORPORATION_DATE,SSIC_CODE,CUSTOMER_TYPE,SECTOR_TYPE,PARENT_GROUP_ID,PARENT_GROUP_NAME,
                            CURRENCY_CODE,SOLE_PROP_IND,PARTNERSHIP_IND,REGISTERED_NUMBER,PRINCIPAL_ACTIVITY,PROP_DEVELOPER_IND,CUST_SIZE,Annual_Revenue,MonthOfImport
                        FROM  cv_",LV_TABLE_NAME,";");   
    SET @LSQL = LSQL; 
    PREPARE STMT2 FROM @LSQL;
    EXECUTE STMT2;
    GET DIAGNOSTICS l_rowcount = ROW_COUNT;
    DEALLOCATE PREPARE STMT2; 
    
    COMMIT;
    
    IF l_code=''
    THEN
        SET LV_STATUS = 'Completed';
        CALL error_handler(
        'Info',
        'Success',
        '',
        CONCAT("Table: ",LV_TABLE_NAME," - Inserted Month: ",DATE_FORMAT(DATE(NOW() - INTERVAL 1 MONTH),'%b-%y')," counts:",l_rowcount),
        'proc_CustomerMaster'
        ,CONCAT(IN_JOB_ID));
    ELSE
        SET LV_STATUS = 'Error';
    END IF; 

    SET LSQL='',l_code='',l_message='';
    SET LSQL = CONCAT("UPDATE NS_Job_Detail SET RowCount=",l_rowcount,",Status='",LV_STATUS,"',EndDateTime=NOW() WHERE JobID=",IN_JOB_ID," AND NS_Name='",LV_TABLE_NAME,"';");   
    SET @LSQL = LSQL;
    PREPARE STMT2 FROM @LSQL;
    EXECUTE STMT2;
    GET DIAGNOSTICS l_rowcount = ROW_COUNT;
    DEALLOCATE PREPARE STMT2; 

    IF l_code=''
    THEN
        CALL error_handler(
        'Info',
        'Success',
        '',
        CONCAT("Table: NS_Job_Detail - Updated RowCount Successfully"),
        'proc_CustomerMaster'
        ,CONCAT(IN_JOB_ID));
    END IF; 
END$$
DELIMITER ;